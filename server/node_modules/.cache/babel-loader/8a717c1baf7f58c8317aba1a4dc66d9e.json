{"ast":null,"code":"var _jsxFileName = \"/Users/Luke/Desktop/School_Fall_19/Capstone/ProgrammingWorkspace/PersonalBranch/WebEvents/src/sheet.js\";\nimport React from \"react\";\nimport XLSX from \"xlsx\";\n\nclass SheetJSApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n\n      /* Array of Arrays e.g. [[\"a\",\"b\"],[1,2]] */\n      cols: []\n      /* Array of column objects e.g. { name: \"C\", K: 2 } */\n\n    };\n    this.handleFile = this.handleFile.bind(this);\n    this.exportFile = this.exportFile.bind(this);\n  }\n\n  handleFile(file\n  /*:File*/\n  ) {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = e => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS ? 'binary' : 'array'\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n\n      const data = XLSX.utils.sheet_to_json(ws, {\n        header: 1\n      });\n      /* Update state */\n\n      this.setState({\n        data: data,\n        cols: make_cols(ws['!ref'])\n      });\n    };\n\n    if (rABS) reader.readAsBinaryString(file);else reader.readAsArrayBuffer(file);\n  }\n\n  exportFile() {\n    /* convert state to workbook */\n    const ws = XLSX.utils.aoa_to_sheet(this.state.data);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n    /* generate XLSX file and send to client */\n\n    XLSX.writeFile(wb, \"sheetjs.xlsx\");\n  }\n\n  render() {\n    return React.createElement(DragDropFile, {\n      handleFile: this.handleFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-xs-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(DataInput, {\n      handleFile: this.handleFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-xs-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      disabled: !this.state.data.length,\n      className: \"btn btn-success\",\n      onClick: this.exportFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Export\"))), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-xs-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(OutTable, {\n      data: this.state.data,\n      cols: this.state.cols,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }))));\n  }\n\n}\n\n; //if (typeof module !== 'undefined') module.exports = SheetJSApp\n\n/* -------------------------------------------------------------------------- */\n\n/*\n  Simple HTML5 file drag-and-drop wrapper\n  usage: <DragDropFile handleFile={handleFile}>...</DragDropFile>\n    handleFile(file:File):void;\n*/\n\nclass DragDropFile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onDrop = this.onDrop.bind(this);\n  }\n\n  suppress(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n  }\n\n  onDrop(evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n    const files = evt.dataTransfer.files;\n    if (files && files[0]) this.props.handleFile(files[0]);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      onDrop: this.onDrop,\n      onDragEnter: this.suppress,\n      onDragOver: this.suppress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n\n;\n/*\n  Simple HTML5 file input wrapper\n  usage: <DataInput handleFile={callback} />\n    handleFile(file:File):void;\n*/\n\nclass DataInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    const files = e.target.files;\n    if (files && files[0]) this.props.handleFile(files[0]);\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"form-inline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"file\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Spreadsheet\"), React.createElement(\"input\", {\n      type: \"file\",\n      className: \"form-control\",\n      id: \"file\",\n      accept: SheetJSFT,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })));\n  }\n\n}\n/*\n  Simple HTML Table\n  usage: <OutTable data={data} cols={cols} />\n    data:Array<Array<any> >;\n    cols:Array<{name:string, key:number|string}>;\n*/\n\n\nclass OutTable extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"table-responsive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      className: \"table table-striped\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, this.props.cols.map(c => React.createElement(\"th\", {\n      key: c.key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, c.name)))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, this.props.data.map((r, i) => React.createElement(\"tr\", {\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, this.props.cols.map(c => React.createElement(\"td\", {\n      key: c.key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, r[c.key])))))));\n  }\n\n}\n\n;\n/* list of supported file types */\n\nconst SheetJSFT = [\"xlsx\", \"xlsb\", \"xlsm\", \"xls\", \"xml\", \"csv\", \"txt\", \"ods\", \"fods\", \"uos\", \"sylk\", \"dif\", \"dbf\", \"prn\", \"qpw\", \"123\", \"wb*\", \"wq*\", \"html\", \"htm\"].map(function (x) {\n  return \".\" + x;\n}).join(\",\");\n/* generate an array of column objects */\n\nconst make_cols = refstr => {\n  let o = [],\n      C = XLSX.utils.decode_range(refstr).e.c + 1;\n\n  for (var i = 0; i < C; ++i) o[i] = {\n    name: XLSX.utils.encode_col(i),\n    key: i\n  };\n\n  return o;\n};\n\nexport default SheetJSApp;","map":{"version":3,"sources":["/Users/Luke/Desktop/School_Fall_19/Capstone/ProgrammingWorkspace/PersonalBranch/WebEvents/src/sheet.js"],"names":["React","XLSX","SheetJSApp","Component","constructor","props","state","data","cols","handleFile","bind","exportFile","file","reader","FileReader","rABS","readAsBinaryString","onload","e","bstr","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","setState","make_cols","readAsArrayBuffer","aoa_to_sheet","book_new","book_append_sheet","writeFile","render","length","DragDropFile","onDrop","suppress","evt","stopPropagation","preventDefault","files","dataTransfer","children","DataInput","handleChange","SheetJSFT","OutTable","map","c","key","name","r","i","x","join","refstr","o","C","decode_range","encode_col"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport XLSX from \"xlsx\";\n\n\nclass SheetJSApp extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [], /* Array of Arrays e.g. [[\"a\",\"b\"],[1,2]] */\n            cols: []  /* Array of column objects e.g. { name: \"C\", K: 2 } */\n        };\n        this.handleFile = this.handleFile.bind(this);\n        this.exportFile = this.exportFile.bind(this);\n    };\n    handleFile(file/*:File*/) {\n        /* Boilerplate to set up FileReader */\n        const reader = new FileReader();\n        const rABS = !!reader.readAsBinaryString;\n        reader.onload = (e) => {\n            /* Parse data */\n            const bstr = e.target.result;\n            const wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array' });\n            /* Get first worksheet */\n            const wsname = wb.SheetNames[0];\n            const ws = wb.Sheets[wsname];\n            /* Convert array of arrays */\n            const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n            /* Update state */\n            this.setState({ data: data, cols: make_cols(ws['!ref']) });\n        };\n        if (rABS) reader.readAsBinaryString(file); else reader.readAsArrayBuffer(file);\n    };\n    exportFile() {\n        /* convert state to workbook */\n        const ws = XLSX.utils.aoa_to_sheet(this.state.data);\n        const wb = XLSX.utils.book_new();\n        XLSX.utils.book_append_sheet(wb, ws, \"SheetJS\");\n        /* generate XLSX file and send to client */\n        XLSX.writeFile(wb, \"sheetjs.xlsx\")\n    };\n    render() {\n        return (\n            <DragDropFile handleFile={this.handleFile}>\n                <div className=\"row\"><div className=\"col-xs-12\">\n                    <DataInput handleFile={this.handleFile} />\n                </div></div>\n                <div className=\"row\"><div className=\"col-xs-12\">\n                    <button disabled={!this.state.data.length} className=\"btn btn-success\" onClick={this.exportFile}>Export</button>\n                </div></div>\n                <div className=\"row\"><div className=\"col-xs-12\">\n                    <OutTable data={this.state.data} cols={this.state.cols} />\n                </div></div>\n            </DragDropFile>\n        );\n    };\n};\n\n//if (typeof module !== 'undefined') module.exports = SheetJSApp\n\n/* -------------------------------------------------------------------------- */\n\n/*\n  Simple HTML5 file drag-and-drop wrapper\n  usage: <DragDropFile handleFile={handleFile}>...</DragDropFile>\n    handleFile(file:File):void;\n*/\nclass DragDropFile extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onDrop = this.onDrop.bind(this);\n    };\n    suppress(evt) { evt.stopPropagation(); evt.preventDefault(); };\n    onDrop(evt) {\n        evt.stopPropagation(); evt.preventDefault();\n        const files = evt.dataTransfer.files;\n        if (files && files[0]) this.props.handleFile(files[0]);\n    };\n    render() {\n        return (\n            <div onDrop={this.onDrop} onDragEnter={this.suppress} onDragOver={this.suppress}>\n                {this.props.children}\n            </div>\n        );\n    };\n};\n\n/*\n  Simple HTML5 file input wrapper\n  usage: <DataInput handleFile={callback} />\n    handleFile(file:File):void;\n*/\nclass DataInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    };\n    handleChange(e) {\n        const files = e.target.files;\n        if (files && files[0]) this.props.handleFile(files[0]);\n    };\n    render() {\n        return (\n            <form className=\"form-inline\">\n                <div className=\"form-group\">\n                    <label htmlFor=\"file\">Spreadsheet</label>\n                    <input type=\"file\" className=\"form-control\" id=\"file\" accept={SheetJSFT} onChange={this.handleChange} />\n                </div>\n            </form>\n        );\n    };\n}\n\n/*\n  Simple HTML Table\n  usage: <OutTable data={data} cols={cols} />\n    data:Array<Array<any> >;\n    cols:Array<{name:string, key:number|string}>;\n*/\nclass OutTable extends React.Component {\n    constructor(props) { super(props); };\n    render() {\n        return (\n            <div className=\"table-responsive\">\n                <table className=\"table table-striped\">\n                    <thead>\n                        <tr>{this.props.cols.map((c) => <th key={c.key}>{c.name}</th>)}</tr>\n                    </thead>\n                    <tbody>\n                        {this.props.data.map((r, i) => <tr key={i}>\n                            {this.props.cols.map(c => <td key={c.key}>{r[c.key]}</td>)}\n                        </tr>)}\n                    </tbody>\n                </table>\n            </div>\n        );\n    };\n};\n\n/* list of supported file types */\nconst SheetJSFT = [\n    \"xlsx\", \"xlsb\", \"xlsm\", \"xls\", \"xml\", \"csv\", \"txt\", \"ods\", \"fods\", \"uos\", \"sylk\", \"dif\", \"dbf\", \"prn\", \"qpw\", \"123\", \"wb*\", \"wq*\", \"html\", \"htm\"\n].map(function (x) { return \".\" + x; }).join(\",\");\n\n/* generate an array of column objects */\nconst make_cols = refstr => {\n    let o = [], C = XLSX.utils.decode_range(refstr).e.c + 1;\n    for (var i = 0; i < C; ++i) o[i] = { name: XLSX.utils.encode_col(i), key: i }\n    return o;\n};\nexport default SheetJSApp;"]},"metadata":{},"sourceType":"module"}