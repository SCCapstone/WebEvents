{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nrequire(\"./JsonToTable.css\");\n\nvar JsonToTableUtils_1 = require(\"./JsonToTableUtils\");\n\nvar JsonToTableUtils_2 = require(\"./JsonToTableUtils\");\n\nvar JsonToTable =\n/** @class */\nfunction (_super) {\n  __extends(JsonToTable, _super); // constructor\n\n\n  function JsonToTable(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this.renderObject = function (obj, header, idx) {\n      var phrase = [];\n      var tmp;\n\n      if (header) {\n        phrase.push(_this.renderRowHeader(header));\n      }\n\n      var objType = JsonToTableUtils_2.default.getObjectType(obj);\n\n      switch (objType) {\n        case JsonToTableUtils_1.JSONObjectType.ObjectWithNonNumericKeys:\n          tmp = header ? React.createElement(\"table\", {\n            key: \"__j2t_tableObj\" + idx\n          }, React.createElement(\"tbody\", {\n            key: \"__j2t_bObj\" + idx\n          }, _this.renderRows(obj))) : _this.renderRows(obj);\n          break;\n\n        case JsonToTableUtils_1.JSONObjectType.Array:\n          tmp = header ? React.createElement(\"table\", {\n            key: \"__j2t_tableArr\" + idx\n          }, React.createElement(\"tbody\", {\n            key: \"__j2t_bArr\" + idx\n          }, _this.parseArray(obj))) : _this.parseArray(obj);\n          break;\n      }\n\n      phrase.push(tmp);\n      var retval = phrase.map(function (p) {\n        return p;\n      });\n      return header ? React.createElement(\"tr\", {\n        key: \"__j2t_trObj\" + idx\n      }, _this.renderCell({\n        content: retval,\n        colspan: 2\n      })) : retval;\n    };\n\n    _this.renderCell = function (params) {\n      var content = params.content,\n          colspan = params.colspan,\n          isHeader = params.isHeader;\n      var valueDisplay = isHeader ? React.createElement(\"strong\", null, content) : content;\n      return React.createElement(\"td\", {\n        colSpan: colspan ? colspan : 0,\n        key: \"__j2t_trObj\" + valueDisplay\n      }, valueDisplay);\n    };\n\n    _this.renderHeader = function (labels) {\n      return React.createElement(\"tr\", {\n        key: \"__j2t_trHeader\"\n      }, labels.map(function (v) {\n        return _this.renderCell({\n          content: v\n        });\n      }));\n    };\n\n    _this.renderValues = function (values) {\n      return React.createElement(\"tr\", {\n        key: \"__j2t_trArrString\"\n      }, values.map(function (k) {\n        return _this.renderCell({\n          content: k\n        });\n      }));\n    };\n\n    _this.renderRowValues = function (anArray, labels) {\n      return anArray.map(function (item, idx) {\n        return React.createElement(\"tr\", {\n          key: \"__j2t_Arr\" + idx.toString()\n        }, labels.map(function (k) {\n          var isValuePrimitive = JsonToTableUtils_2.default.getObjectType(k) === JsonToTableUtils_1.JSONObjectType.Primitive;\n          return isValuePrimitive ? _this.renderCell({\n            content: item[k]\n          }) : _this.renderObject(item[k], k, idx);\n        }));\n      });\n    };\n\n    _this.parseArray = function (anArray) {\n      var phrase = [];\n      var labels = JsonToTableUtils_2.default.getUniqueObjectKeys(anArray);\n\n      if (JsonToTableUtils_2.default.checkLabelTypes(labels.labels) !== \"number\") {\n        phrase.push(_this.renderHeader(labels.labels));\n        phrase.push(_this.renderRowValues(anArray, labels.labels));\n      } else {\n        phrase.push(_this.renderValues(anArray));\n      }\n\n      return phrase;\n    };\n\n    _this.renderRow = function (k, v, idx) {\n      return React.createElement(\"tr\", {\n        key: \"__j2t_tr\" + idx\n      }, React.createElement(\"td\", {\n        key: \"__j2t_tdk\" + idx\n      }, React.createElement(\"strong\", null, k)), React.createElement(\"td\", {\n        key: \"__j2t_tdv\" + idx\n      }, v));\n    };\n\n    _this.renderRowHeader = function (label) {\n      return React.createElement(\"div\", {\n        key: \"__j2t_rw\" + label\n      }, React.createElement(\"strong\", null, label));\n    };\n\n    _this.renderRows = function (obj, labelKey) {\n      return Object.keys(obj).map(function (k, idx) {\n        var value = obj[k];\n        var isValuePrimitive = JsonToTableUtils_2.default.getObjectType(value) === JsonToTableUtils_1.JSONObjectType.Primitive; // render row when value is primitive otherwise inspect the value and make the key as header\n\n        var retval = isValuePrimitive ? _this.renderRow(k, value, idx) : _this.renderObject(value, k, idx);\n        return retval;\n      });\n    };\n\n    return _this;\n  }\n\n  JsonToTable.prototype.render = function () {\n    return React.createElement(\"div\", {\n      className: 'json-to-table'\n    }, React.createElement(\"table\", {\n      key: \"__j2t_root_table\"\n    }, React.createElement(\"tbody\", {\n      key: \"__j2t_root_tbody\"\n    }, this.renderObject(this.props.json, undefined, 0))));\n  };\n\n  return JsonToTable;\n}(React.Component);\n\nexports.default = JsonToTable;","map":null,"metadata":{},"sourceType":"script"}